// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: jhnet.proto
// Protobuf C++ Version: 5.29.3

#include "jhnet.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace jhnet {

inline constexpr SCP_SelectCharResult::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        success_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_SelectCharResult::SCP_SelectCharResult(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_SelectCharResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_SelectCharResultDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_SelectCharResultDefaultTypeInternal() {}
  union {
    SCP_SelectCharResult _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_SelectCharResultDefaultTypeInternal _SCP_SelectCharResult_default_instance_;

inline constexpr SCP_Ping::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_{::uint64_t{0u}},
        number_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_Ping::SCP_Ping(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_PingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_PingDefaultTypeInternal() {}
  union {
    SCP_Ping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_PingDefaultTypeInternal _SCP_Ping_default_instance_;

inline constexpr SCP_Login::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_ok_{false},
        account_uid_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_Login::SCP_Login(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_LoginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_LoginDefaultTypeInternal() {}
  union {
    SCP_Login _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_LoginDefaultTypeInternal _SCP_Login_default_instance_;

inline constexpr SCP_Echo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        number_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_Echo::SCP_Echo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_EchoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_EchoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_EchoDefaultTypeInternal() {}
  union {
    SCP_Echo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_EchoDefaultTypeInternal _SCP_Echo_default_instance_;

inline constexpr SCP_Despawn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : field_unique_{},
        _field_unique_cached_byte_size_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_Despawn::SCP_Despawn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_DespawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_DespawnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_DespawnDefaultTypeInternal() {}
  union {
    SCP_Despawn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_DespawnDefaultTypeInternal _SCP_Despawn_default_instance_;

inline constexpr SCP_CreateChar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        create_ok_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_CreateChar::SCP_CreateChar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_CreateCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_CreateCharDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_CreateCharDefaultTypeInternal() {}
  union {
    SCP_CreateChar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_CreateCharDefaultTypeInternal _SCP_CreateChar_default_instance_;

inline constexpr PosInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : x_{0},
        y_{0},
        dir_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PosInfo::PosInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PosInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PosInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PosInfoDefaultTypeInternal() {}
  union {
    PosInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PosInfoDefaultTypeInternal _PosInfo_default_instance_;

inline constexpr MyPlayerDetailInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : level_{0},
        job_code_{0},
        exp_{::int64_t{0}},
        hp_{0},
        max_hp_{0},
        damage_{0},
        defense_{0},
        gold_{::int64_t{0}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MyPlayerDetailInfo::MyPlayerDetailInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MyPlayerDetailInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MyPlayerDetailInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MyPlayerDetailInfoDefaultTypeInternal() {}
  union {
    MyPlayerDetailInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MyPlayerDetailInfoDefaultTypeInternal _MyPlayerDetailInfo_default_instance_;

inline constexpr CharacterInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : nickname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        character_uid_{::uint64_t{0u}},
        level_{0},
        job_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CharacterInfo::CharacterInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CharacterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CharacterInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CharacterInfoDefaultTypeInternal() {}
  union {
    CharacterInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CharacterInfoDefaultTypeInternal _CharacterInfo_default_instance_;

inline constexpr CSP_SelectChar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : character_uid_{::uint64_t{0u}},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSP_SelectChar::CSP_SelectChar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSP_SelectCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_SelectCharDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_SelectCharDefaultTypeInternal() {}
  union {
    CSP_SelectChar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_SelectCharDefaultTypeInternal _CSP_SelectChar_default_instance_;

inline constexpr CSP_Ping::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : timestamp_{::uint64_t{0u}},
        number_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSP_Ping::CSP_Ping(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSP_PingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_PingDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_PingDefaultTypeInternal() {}
  union {
    CSP_Ping _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_PingDefaultTypeInternal _CSP_Ping_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR CSP_MapLoadEnd::CSP_MapLoadEnd(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CSP_MapLoadEndDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_MapLoadEndDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_MapLoadEndDefaultTypeInternal() {}
  union {
    CSP_MapLoadEnd _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_MapLoadEndDefaultTypeInternal _CSP_MapLoadEnd_default_instance_;

inline constexpr CSP_Login::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : login_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        login_pw_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSP_Login::CSP_Login(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSP_LoginDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_LoginDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_LoginDefaultTypeInternal() {}
  union {
    CSP_Login _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_LoginDefaultTypeInternal _CSP_Login_default_instance_;

inline constexpr CSP_Echo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        number_{0u},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSP_Echo::CSP_Echo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSP_EchoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_EchoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_EchoDefaultTypeInternal() {}
  union {
    CSP_Echo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_EchoDefaultTypeInternal _CSP_Echo_default_instance_;

inline constexpr CSP_CreateChar::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        job_code_{0},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CSP_CreateChar::CSP_CreateChar(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSP_CreateCharDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_CreateCharDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_CreateCharDefaultTypeInternal() {}
  union {
    CSP_CreateChar _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_CreateCharDefaultTypeInternal _CSP_CreateChar_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR CSP_CharList::CSP_CharList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct CSP_CharListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_CharListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_CharListDefaultTypeInternal() {}
  union {
    CSP_CharList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_CharListDefaultTypeInternal _CSP_CharList_default_instance_;

inline constexpr SCP_Move::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pos_info_{nullptr},
        field_unique_{::uint64_t{0u}} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_Move::SCP_Move(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_MoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_MoveDefaultTypeInternal() {}
  union {
    SCP_Move _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_MoveDefaultTypeInternal _SCP_Move_default_instance_;

inline constexpr SCP_CharList::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : characters_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_CharList::SCP_CharList(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_CharListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_CharListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_CharListDefaultTypeInternal() {}
  union {
    SCP_CharList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_CharListDefaultTypeInternal _SCP_CharList_default_instance_;

inline constexpr PlayerInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nickname_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        pos_info_{nullptr},
        field_unique_{::uint64_t{0u}},
        hp_percent_{0},
        look_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR PlayerInfo::PlayerInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct PlayerInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PlayerInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PlayerInfoDefaultTypeInternal() {}
  union {
    PlayerInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;

inline constexpr CSP_Move::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        pos_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CSP_Move::CSP_Move(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CSP_MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CSP_MoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CSP_MoveDefaultTypeInternal() {}
  union {
    CSP_Move _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CSP_MoveDefaultTypeInternal _CSP_Move_default_instance_;

inline constexpr SCP_Spawn::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : players_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_Spawn::SCP_Spawn(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_SpawnDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_SpawnDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_SpawnDefaultTypeInternal() {}
  union {
    SCP_Spawn _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_SpawnDefaultTypeInternal _SCP_Spawn_default_instance_;

inline constexpr SCP_MyCharacterInfo::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        my_player_info_{nullptr},
        my_detail_info_{nullptr},
        map_id_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_MyCharacterInfo::SCP_MyCharacterInfo(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_MyCharacterInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_MyCharacterInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_MyCharacterInfoDefaultTypeInternal() {}
  union {
    SCP_MyCharacterInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_MyCharacterInfoDefaultTypeInternal _SCP_MyCharacterInfo_default_instance_;

inline constexpr SCP_EnterGame::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        players_{},
        my_pos_info_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR SCP_EnterGame::SCP_EnterGame(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SCP_EnterGameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SCP_EnterGameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SCP_EnterGameDefaultTypeInternal() {}
  union {
    SCP_EnterGame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SCP_EnterGameDefaultTypeInternal _SCP_EnterGame_default_instance_;
}  // namespace jhnet
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_jhnet_2eproto[1];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_jhnet_2eproto = nullptr;
const ::uint32_t
    TableStruct_jhnet_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::PosInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::PosInfo, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PosInfo, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PosInfo, _impl_.dir_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CharacterInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CharacterInfo, _impl_.character_uid_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CharacterInfo, _impl_.nickname_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CharacterInfo, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CharacterInfo, _impl_.job_code_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _impl_.field_unique_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _impl_.nickname_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _impl_.pos_info_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _impl_.hp_percent_),
        PROTOBUF_FIELD_OFFSET(::jhnet::PlayerInfo, _impl_.look_id_),
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.level_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.job_code_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.exp_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.hp_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.max_hp_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.damage_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.defense_),
        PROTOBUF_FIELD_OFFSET(::jhnet::MyPlayerDetailInfo, _impl_.gold_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Ping, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Ping, _impl_.number_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Ping, _impl_.timestamp_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Echo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Echo, _impl_.number_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Echo, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Login, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Login, _impl_.login_id_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Login, _impl_.login_pw_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_CharList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_CreateChar, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_CreateChar, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_CreateChar, _impl_.job_code_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_SelectChar, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_SelectChar, _impl_.character_uid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_MapLoadEnd, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Move, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Move, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::CSP_Move, _impl_.pos_info_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Ping, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Ping, _impl_.number_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Ping, _impl_.timestamp_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Echo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Echo, _impl_.number_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Echo, _impl_.message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Login, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Login, _impl_.login_ok_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Login, _impl_.error_message_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Login, _impl_.account_uid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_CreateChar, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_CreateChar, _impl_.create_ok_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_CreateChar, _impl_.error_message_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_CharList, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_CharList, _impl_.characters_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_SelectCharResult, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_SelectCharResult, _impl_.success_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_SelectCharResult, _impl_.error_message_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_MyCharacterInfo, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_MyCharacterInfo, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_MyCharacterInfo, _impl_.my_player_info_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_MyCharacterInfo, _impl_.map_id_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_MyCharacterInfo, _impl_.my_detail_info_),
        0,
        ~0u,
        1,
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_EnterGame, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_EnterGame, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_EnterGame, _impl_.my_pos_info_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_EnterGame, _impl_.players_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Spawn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Spawn, _impl_.players_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Despawn, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Despawn, _impl_.field_unique_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Move, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Move, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Move, _impl_.field_unique_),
        PROTOBUF_FIELD_OFFSET(::jhnet::SCP_Move, _impl_.pos_info_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, -1, -1, sizeof(::jhnet::PosInfo)},
        {11, -1, -1, sizeof(::jhnet::CharacterInfo)},
        {23, 36, -1, sizeof(::jhnet::PlayerInfo)},
        {41, -1, -1, sizeof(::jhnet::MyPlayerDetailInfo)},
        {57, -1, -1, sizeof(::jhnet::CSP_Ping)},
        {67, -1, -1, sizeof(::jhnet::CSP_Echo)},
        {77, -1, -1, sizeof(::jhnet::CSP_Login)},
        {87, -1, -1, sizeof(::jhnet::CSP_CharList)},
        {95, -1, -1, sizeof(::jhnet::CSP_CreateChar)},
        {105, -1, -1, sizeof(::jhnet::CSP_SelectChar)},
        {114, -1, -1, sizeof(::jhnet::CSP_MapLoadEnd)},
        {122, 131, -1, sizeof(::jhnet::CSP_Move)},
        {132, -1, -1, sizeof(::jhnet::SCP_Ping)},
        {142, -1, -1, sizeof(::jhnet::SCP_Echo)},
        {152, -1, -1, sizeof(::jhnet::SCP_Login)},
        {163, -1, -1, sizeof(::jhnet::SCP_CreateChar)},
        {173, -1, -1, sizeof(::jhnet::SCP_CharList)},
        {182, -1, -1, sizeof(::jhnet::SCP_SelectCharResult)},
        {192, 203, -1, sizeof(::jhnet::SCP_MyCharacterInfo)},
        {206, 216, -1, sizeof(::jhnet::SCP_EnterGame)},
        {218, -1, -1, sizeof(::jhnet::SCP_Spawn)},
        {227, -1, -1, sizeof(::jhnet::SCP_Despawn)},
        {236, 246, -1, sizeof(::jhnet::SCP_Move)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::jhnet::_PosInfo_default_instance_._instance,
    &::jhnet::_CharacterInfo_default_instance_._instance,
    &::jhnet::_PlayerInfo_default_instance_._instance,
    &::jhnet::_MyPlayerDetailInfo_default_instance_._instance,
    &::jhnet::_CSP_Ping_default_instance_._instance,
    &::jhnet::_CSP_Echo_default_instance_._instance,
    &::jhnet::_CSP_Login_default_instance_._instance,
    &::jhnet::_CSP_CharList_default_instance_._instance,
    &::jhnet::_CSP_CreateChar_default_instance_._instance,
    &::jhnet::_CSP_SelectChar_default_instance_._instance,
    &::jhnet::_CSP_MapLoadEnd_default_instance_._instance,
    &::jhnet::_CSP_Move_default_instance_._instance,
    &::jhnet::_SCP_Ping_default_instance_._instance,
    &::jhnet::_SCP_Echo_default_instance_._instance,
    &::jhnet::_SCP_Login_default_instance_._instance,
    &::jhnet::_SCP_CreateChar_default_instance_._instance,
    &::jhnet::_SCP_CharList_default_instance_._instance,
    &::jhnet::_SCP_SelectCharResult_default_instance_._instance,
    &::jhnet::_SCP_MyCharacterInfo_default_instance_._instance,
    &::jhnet::_SCP_EnterGame_default_instance_._instance,
    &::jhnet::_SCP_Spawn_default_instance_._instance,
    &::jhnet::_SCP_Despawn_default_instance_._instance,
    &::jhnet::_SCP_Move_default_instance_._instance,
};
const char descriptor_table_protodef_jhnet_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\013jhnet.proto\022\005jhnet\",\n\007PosInfo\022\t\n\001x\030\001 \001"
    "(\005\022\t\n\001y\030\002 \001(\005\022\013\n\003dir\030\003 \001(\005\"Y\n\rCharacterI"
    "nfo\022\025\n\rcharacter_uid\030\001 \001(\004\022\020\n\010nickname\030\002"
    " \001(\t\022\r\n\005level\030\003 \001(\005\022\020\n\010job_code\030\004 \001(\005\"{\n"
    "\nPlayerInfo\022\024\n\014field_unique\030\001 \001(\004\022\020\n\010nic"
    "kname\030\002 \001(\t\022 \n\010pos_info\030\003 \001(\0132\016.jhnet.Po"
    "sInfo\022\022\n\nhp_percent\030\004 \001(\005\022\017\n\007look_id\030\005 \001"
    "(\005\"\215\001\n\022MyPlayerDetailInfo\022\r\n\005level\030\001 \001(\005"
    "\022\020\n\010job_code\030\002 \001(\005\022\013\n\003exp\030\003 \001(\003\022\n\n\002hp\030\004 "
    "\001(\005\022\016\n\006max_hp\030\005 \001(\005\022\016\n\006damage\030\006 \001(\005\022\017\n\007d"
    "efense\030\007 \001(\005\022\014\n\004gold\030\010 \001(\003\"-\n\010CSP_Ping\022\016"
    "\n\006number\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\"+\n\010CSP"
    "_Echo\022\016\n\006number\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"/"
    "\n\tCSP_Login\022\020\n\010login_id\030\001 \001(\t\022\020\n\010login_p"
    "w\030\002 \001(\t\"\016\n\014CSP_CharList\"0\n\016CSP_CreateCha"
    "r\022\014\n\004name\030\001 \001(\t\022\020\n\010job_code\030\002 \001(\005\"\'\n\016CSP"
    "_SelectChar\022\025\n\rcharacter_uid\030\001 \001(\004\"\020\n\016CS"
    "P_MapLoadEnd\",\n\010CSP_Move\022 \n\010pos_info\030\001 \001"
    "(\0132\016.jhnet.PosInfo\"-\n\010SCP_Ping\022\016\n\006number"
    "\030\001 \001(\r\022\021\n\ttimestamp\030\002 \001(\004\"+\n\010SCP_Echo\022\016\n"
    "\006number\030\001 \001(\r\022\017\n\007message\030\002 \001(\t\"I\n\tSCP_Lo"
    "gin\022\020\n\010login_ok\030\001 \001(\010\022\025\n\rerror_message\030\002"
    " \001(\t\022\023\n\013account_uid\030\003 \001(\r\":\n\016SCP_CreateC"
    "har\022\021\n\tcreate_ok\030\001 \001(\010\022\025\n\rerror_message\030"
    "\002 \001(\t\"8\n\014SCP_CharList\022(\n\ncharacters\030\001 \003("
    "\0132\024.jhnet.CharacterInfo\">\n\024SCP_SelectCha"
    "rResult\022\017\n\007success\030\001 \001(\010\022\025\n\rerror_messag"
    "e\030\002 \001(\t\"\203\001\n\023SCP_MyCharacterInfo\022)\n\016my_pl"
    "ayer_info\030\001 \001(\0132\021.jhnet.PlayerInfo\022\016\n\006ma"
    "p_id\030\002 \001(\005\0221\n\016my_detail_info\030\003 \001(\0132\031.jhn"
    "et.MyPlayerDetailInfo\"X\n\rSCP_EnterGame\022#"
    "\n\013my_pos_info\030\001 \001(\0132\016.jhnet.PosInfo\022\"\n\007p"
    "layers\030\002 \003(\0132\021.jhnet.PlayerInfo\"/\n\tSCP_S"
    "pawn\022\"\n\007players\030\001 \003(\0132\021.jhnet.PlayerInfo"
    "\"#\n\013SCP_Despawn\022\024\n\014field_unique\030\001 \003(\004\"B\n"
    "\010SCP_Move\022\024\n\014field_unique\030\001 \001(\004\022 \n\010pos_i"
    "nfo\030\002 \001(\0132\016.jhnet.PosInfo*\211\003\n\010PacketId\022\022"
    "\n\016PACKET_ID_NONE\020\000\022\r\n\010C2S_PING\020\351\007\022\r\n\010C2S"
    "_ECHO\020\352\007\022\016\n\tC2S_LOGIN\020\353\007\022\022\n\rC2S_CHAR_LIS"
    "T\020\354\007\022\024\n\017C2S_CREATE_CHAR\020\355\007\022\024\n\017C2S_SELECT"
    "_CHAR\020\356\007\022\025\n\020C2S_MAP_LOAD_END\020\357\007\022\r\n\010C2S_M"
    "OVE\020\360\007\022\r\n\010S2C_PING\020\321\017\022\r\n\010S2C_ECHO\020\322\017\022\016\n\t"
    "S2C_LOGIN\020\323\017\022\022\n\rS2C_CHAR_LIST\020\324\017\022\024\n\017S2C_"
    "CREATE_CHAR\020\325\017\022\033\n\026S2C_SELECT_CHAR_RESULT"
    "\020\326\017\022\032\n\025S2C_MY_CHARACTER_INFO\020\327\017\022\023\n\016S2C_E"
    "NTER_GAME\020\330\017\022\016\n\tS2C_SPAWN\020\331\017\022\020\n\013S2C_DESP"
    "AWN\020\332\017\022\r\n\010S2C_MOVE\020\333\017b\006proto3"
};
static ::absl::once_flag descriptor_table_jhnet_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_jhnet_2eproto = {
    false,
    false,
    1869,
    descriptor_table_protodef_jhnet_2eproto,
    "jhnet.proto",
    &descriptor_table_jhnet_2eproto_once,
    nullptr,
    0,
    23,
    schemas,
    file_default_instances,
    TableStruct_jhnet_2eproto::offsets,
    file_level_enum_descriptors_jhnet_2eproto,
    file_level_service_descriptors_jhnet_2eproto,
};
namespace jhnet {
const ::google::protobuf::EnumDescriptor* PacketId_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_jhnet_2eproto);
  return file_level_enum_descriptors_jhnet_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t PacketId_internal_data_[] = {
    65536u, 1245184u, 2004u, 1008u, 2008u, 1004u, 2002u, 2006u, 2010u, 1002u, 1006u, 2001u, 2003u, 2005u, 2007u, 2009u, 2011u, 1001u, 1003u, 1005u, 1007u, };
bool PacketId_IsValid(int value) {
  return ::_pbi::ValidateEnum(value, PacketId_internal_data_);
}
// ===================================================================

class PosInfo::_Internal {
 public:
};

PosInfo::PosInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.PosInfo)
}
PosInfo::PosInfo(
    ::google::protobuf::Arena* arena, const PosInfo& from)
    : PosInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE PosInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void PosInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, x_),
           0,
           offsetof(Impl_, dir_) -
               offsetof(Impl_, x_) +
               sizeof(Impl_::dir_));
}
PosInfo::~PosInfo() {
  // @@protoc_insertion_point(destructor:jhnet.PosInfo)
  SharedDtor(*this);
}
inline void PosInfo::SharedDtor(MessageLite& self) {
  PosInfo& this_ = static_cast<PosInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* PosInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PosInfo(arena);
}
constexpr auto PosInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(PosInfo),
                                            alignof(PosInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PosInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PosInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PosInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PosInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PosInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PosInfo>(), &PosInfo::ByteSizeLong,
            &PosInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PosInfo, _impl_._cached_size_),
        false,
    },
    &PosInfo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PosInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 0, 2> PosInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::PosInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // int32 x = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PosInfo, _impl_.x_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.x_)}},
    // int32 y = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PosInfo, _impl_.y_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.y_)}},
    // int32 dir = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PosInfo, _impl_.dir_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.dir_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 x = 1;
    {PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.x_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 y = 2;
    {PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.y_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 dir = 3;
    {PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.dir_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void PosInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.PosInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.dir_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.dir_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PosInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PosInfo& this_ = static_cast<const PosInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PosInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PosInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.PosInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 x = 1;
          if (this_._internal_x() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_x(), target);
          }

          // int32 y = 2;
          if (this_._internal_y() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_y(), target);
          }

          // int32 dir = 3;
          if (this_._internal_dir() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_dir(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.PosInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PosInfo::ByteSizeLong(const MessageLite& base) {
          const PosInfo& this_ = static_cast<const PosInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PosInfo::ByteSizeLong() const {
          const PosInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.PosInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 x = 1;
            if (this_._internal_x() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_x());
            }
            // int32 y = 2;
            if (this_._internal_y() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_y());
            }
            // int32 dir = 3;
            if (this_._internal_dir() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_dir());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PosInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PosInfo*>(&to_msg);
  auto& from = static_cast<const PosInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.PosInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_x() != 0) {
    _this->_impl_.x_ = from._impl_.x_;
  }
  if (from._internal_y() != 0) {
    _this->_impl_.y_ = from._impl_.y_;
  }
  if (from._internal_dir() != 0) {
    _this->_impl_.dir_ = from._impl_.dir_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PosInfo::CopyFrom(const PosInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.PosInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PosInfo::InternalSwap(PosInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.dir_)
      + sizeof(PosInfo::_impl_.dir_)
      - PROTOBUF_FIELD_OFFSET(PosInfo, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::google::protobuf::Metadata PosInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CharacterInfo::_Internal {
 public:
};

CharacterInfo::CharacterInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CharacterInfo)
}
inline PROTOBUF_NDEBUG_INLINE CharacterInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::CharacterInfo& from_msg)
      : nickname_(arena, from.nickname_),
        _cached_size_{0} {}

CharacterInfo::CharacterInfo(
    ::google::protobuf::Arena* arena,
    const CharacterInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CharacterInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, character_uid_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, character_uid_),
           offsetof(Impl_, job_code_) -
               offsetof(Impl_, character_uid_) +
               sizeof(Impl_::job_code_));

  // @@protoc_insertion_point(copy_constructor:jhnet.CharacterInfo)
}
inline PROTOBUF_NDEBUG_INLINE CharacterInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : nickname_(arena),
        _cached_size_{0} {}

inline void CharacterInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, character_uid_),
           0,
           offsetof(Impl_, job_code_) -
               offsetof(Impl_, character_uid_) +
               sizeof(Impl_::job_code_));
}
CharacterInfo::~CharacterInfo() {
  // @@protoc_insertion_point(destructor:jhnet.CharacterInfo)
  SharedDtor(*this);
}
inline void CharacterInfo::SharedDtor(MessageLite& self) {
  CharacterInfo& this_ = static_cast<CharacterInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.nickname_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CharacterInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CharacterInfo(arena);
}
constexpr auto CharacterInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CharacterInfo),
                                            alignof(CharacterInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CharacterInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CharacterInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CharacterInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CharacterInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CharacterInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CharacterInfo>(), &CharacterInfo::ByteSizeLong,
            &CharacterInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_._cached_size_),
        false,
    },
    &CharacterInfo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CharacterInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 36, 2> CharacterInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CharacterInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 job_code = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterInfo, _impl_.job_code_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.job_code_)}},
    // uint64 character_uid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CharacterInfo, _impl_.character_uid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.character_uid_)}},
    // string nickname = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.nickname_)}},
    // int32 level = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CharacterInfo, _impl_.level_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.level_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 character_uid = 1;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.character_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string nickname = 2;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.nickname_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 level = 3;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 job_code = 4;
    {PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.job_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\23\0\10\0\0\0\0\0"
    "jhnet.CharacterInfo"
    "nickname"
  }},
};

PROTOBUF_NOINLINE void CharacterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CharacterInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  ::memset(&_impl_.character_uid_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.job_code_) -
      reinterpret_cast<char*>(&_impl_.character_uid_)) + sizeof(_impl_.job_code_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CharacterInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CharacterInfo& this_ = static_cast<const CharacterInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CharacterInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CharacterInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CharacterInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 character_uid = 1;
          if (this_._internal_character_uid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_character_uid(), target);
          }

          // string nickname = 2;
          if (!this_._internal_nickname().empty()) {
            const std::string& _s = this_._internal_nickname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.CharacterInfo.nickname");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int32 level = 3;
          if (this_._internal_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_level(), target);
          }

          // int32 job_code = 4;
          if (this_._internal_job_code() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_job_code(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CharacterInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CharacterInfo::ByteSizeLong(const MessageLite& base) {
          const CharacterInfo& this_ = static_cast<const CharacterInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CharacterInfo::ByteSizeLong() const {
          const CharacterInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CharacterInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string nickname = 2;
            if (!this_._internal_nickname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nickname());
            }
            // uint64 character_uid = 1;
            if (this_._internal_character_uid() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_character_uid());
            }
            // int32 level = 3;
            if (this_._internal_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_level());
            }
            // int32 job_code = 4;
            if (this_._internal_job_code() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_job_code());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CharacterInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CharacterInfo*>(&to_msg);
  auto& from = static_cast<const CharacterInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CharacterInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  if (from._internal_character_uid() != 0) {
    _this->_impl_.character_uid_ = from._impl_.character_uid_;
  }
  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (from._internal_job_code() != 0) {
    _this->_impl_.job_code_ = from._impl_.job_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CharacterInfo::CopyFrom(const CharacterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CharacterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CharacterInfo::InternalSwap(CharacterInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nickname_, &other->_impl_.nickname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.job_code_)
      + sizeof(CharacterInfo::_impl_.job_code_)
      - PROTOBUF_FIELD_OFFSET(CharacterInfo, _impl_.character_uid_)>(
          reinterpret_cast<char*>(&_impl_.character_uid_),
          reinterpret_cast<char*>(&other->_impl_.character_uid_));
}

::google::protobuf::Metadata CharacterInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class PlayerInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<PlayerInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_._has_bits_);
};

PlayerInfo::PlayerInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.PlayerInfo)
}
inline PROTOBUF_NDEBUG_INLINE PlayerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::PlayerInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        nickname_(arena, from.nickname_) {}

PlayerInfo::PlayerInfo(
    ::google::protobuf::Arena* arena,
    const PlayerInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  PlayerInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pos_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(
                              arena, *from._impl_.pos_info_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, field_unique_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, field_unique_),
           offsetof(Impl_, look_id_) -
               offsetof(Impl_, field_unique_) +
               sizeof(Impl_::look_id_));

  // @@protoc_insertion_point(copy_constructor:jhnet.PlayerInfo)
}
inline PROTOBUF_NDEBUG_INLINE PlayerInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        nickname_(arena) {}

inline void PlayerInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_info_),
           0,
           offsetof(Impl_, look_id_) -
               offsetof(Impl_, pos_info_) +
               sizeof(Impl_::look_id_));
}
PlayerInfo::~PlayerInfo() {
  // @@protoc_insertion_point(destructor:jhnet.PlayerInfo)
  SharedDtor(*this);
}
inline void PlayerInfo::SharedDtor(MessageLite& self) {
  PlayerInfo& this_ = static_cast<PlayerInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.nickname_.Destroy();
  delete this_._impl_.pos_info_;
  this_._impl_.~Impl_();
}

inline void* PlayerInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) PlayerInfo(arena);
}
constexpr auto PlayerInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(PlayerInfo),
                                            alignof(PlayerInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull PlayerInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_PlayerInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &PlayerInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<PlayerInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &PlayerInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<PlayerInfo>(), &PlayerInfo::ByteSizeLong,
            &PlayerInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_._cached_size_),
        false,
    },
    &PlayerInfo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* PlayerInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 1, 33, 2> PlayerInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::PlayerInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // uint64 field_unique = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(PlayerInfo, _impl_.field_unique_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.field_unique_)}},
    // string nickname = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.nickname_)}},
    // .jhnet.PosInfo pos_info = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.pos_info_)}},
    // int32 hp_percent = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerInfo, _impl_.hp_percent_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.hp_percent_)}},
    // int32 look_id = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(PlayerInfo, _impl_.look_id_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.look_id_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 field_unique = 1;
    {PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.field_unique_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // string nickname = 2;
    {PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.nickname_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .jhnet.PosInfo pos_info = 3;
    {PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.pos_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 hp_percent = 4;
    {PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.hp_percent_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 look_id = 5;
    {PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.look_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::PosInfo>()},
  }}, {{
    "\20\0\10\0\0\0\0\0"
    "jhnet.PlayerInfo"
    "nickname"
  }},
};

PROTOBUF_NOINLINE void PlayerInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.PlayerInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nickname_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pos_info_ != nullptr);
    _impl_.pos_info_->Clear();
  }
  ::memset(&_impl_.field_unique_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.look_id_) -
      reinterpret_cast<char*>(&_impl_.field_unique_)) + sizeof(_impl_.look_id_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* PlayerInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const PlayerInfo& this_ = static_cast<const PlayerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* PlayerInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const PlayerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.PlayerInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 field_unique = 1;
          if (this_._internal_field_unique() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_field_unique(), target);
          }

          // string nickname = 2;
          if (!this_._internal_nickname().empty()) {
            const std::string& _s = this_._internal_nickname();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.PlayerInfo.nickname");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .jhnet.PosInfo pos_info = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.pos_info_, this_._impl_.pos_info_->GetCachedSize(), target,
                stream);
          }

          // int32 hp_percent = 4;
          if (this_._internal_hp_percent() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_hp_percent(), target);
          }

          // int32 look_id = 5;
          if (this_._internal_look_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_look_id(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.PlayerInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t PlayerInfo::ByteSizeLong(const MessageLite& base) {
          const PlayerInfo& this_ = static_cast<const PlayerInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t PlayerInfo::ByteSizeLong() const {
          const PlayerInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.PlayerInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string nickname = 2;
            if (!this_._internal_nickname().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nickname());
            }
          }
           {
            // .jhnet.PosInfo pos_info = 3;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pos_info_);
            }
          }
           {
            // uint64 field_unique = 1;
            if (this_._internal_field_unique() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_field_unique());
            }
            // int32 hp_percent = 4;
            if (this_._internal_hp_percent() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hp_percent());
            }
            // int32 look_id = 5;
            if (this_._internal_look_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_look_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void PlayerInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<PlayerInfo*>(&to_msg);
  auto& from = static_cast<const PlayerInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.PlayerInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nickname().empty()) {
    _this->_internal_set_nickname(from._internal_nickname());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pos_info_ != nullptr);
    if (_this->_impl_.pos_info_ == nullptr) {
      _this->_impl_.pos_info_ =
          ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(arena, *from._impl_.pos_info_);
    } else {
      _this->_impl_.pos_info_->MergeFrom(*from._impl_.pos_info_);
    }
  }
  if (from._internal_field_unique() != 0) {
    _this->_impl_.field_unique_ = from._impl_.field_unique_;
  }
  if (from._internal_hp_percent() != 0) {
    _this->_impl_.hp_percent_ = from._impl_.hp_percent_;
  }
  if (from._internal_look_id() != 0) {
    _this->_impl_.look_id_ = from._impl_.look_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.PlayerInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void PlayerInfo::InternalSwap(PlayerInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nickname_, &other->_impl_.nickname_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.look_id_)
      + sizeof(PlayerInfo::_impl_.look_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerInfo, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MyPlayerDetailInfo::_Internal {
 public:
};

MyPlayerDetailInfo::MyPlayerDetailInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.MyPlayerDetailInfo)
}
MyPlayerDetailInfo::MyPlayerDetailInfo(
    ::google::protobuf::Arena* arena, const MyPlayerDetailInfo& from)
    : MyPlayerDetailInfo(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MyPlayerDetailInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MyPlayerDetailInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, level_),
           0,
           offsetof(Impl_, gold_) -
               offsetof(Impl_, level_) +
               sizeof(Impl_::gold_));
}
MyPlayerDetailInfo::~MyPlayerDetailInfo() {
  // @@protoc_insertion_point(destructor:jhnet.MyPlayerDetailInfo)
  SharedDtor(*this);
}
inline void MyPlayerDetailInfo::SharedDtor(MessageLite& self) {
  MyPlayerDetailInfo& this_ = static_cast<MyPlayerDetailInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MyPlayerDetailInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MyPlayerDetailInfo(arena);
}
constexpr auto MyPlayerDetailInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MyPlayerDetailInfo),
                                            alignof(MyPlayerDetailInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MyPlayerDetailInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MyPlayerDetailInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MyPlayerDetailInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MyPlayerDetailInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MyPlayerDetailInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MyPlayerDetailInfo>(), &MyPlayerDetailInfo::ByteSizeLong,
            &MyPlayerDetailInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_._cached_size_),
        false,
    },
    &MyPlayerDetailInfo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MyPlayerDetailInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 0, 2> MyPlayerDetailInfo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::MyPlayerDetailInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int64 gold = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MyPlayerDetailInfo, _impl_.gold_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.gold_)}},
    // int32 level = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MyPlayerDetailInfo, _impl_.level_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.level_)}},
    // int32 job_code = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MyPlayerDetailInfo, _impl_.job_code_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.job_code_)}},
    // int64 exp = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(MyPlayerDetailInfo, _impl_.exp_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.exp_)}},
    // int32 hp = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MyPlayerDetailInfo, _impl_.hp_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.hp_)}},
    // int32 max_hp = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MyPlayerDetailInfo, _impl_.max_hp_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.max_hp_)}},
    // int32 damage = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MyPlayerDetailInfo, _impl_.damage_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.damage_)}},
    // int32 defense = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MyPlayerDetailInfo, _impl_.defense_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.defense_)}},
  }}, {{
    65535, 65535
  }}, {{
    // int32 level = 1;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.level_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 job_code = 2;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.job_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 exp = 3;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.exp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int32 hp = 4;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.hp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 max_hp = 5;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.max_hp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 damage = 6;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.damage_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 defense = 7;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.defense_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int64 gold = 8;
    {PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.gold_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MyPlayerDetailInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.MyPlayerDetailInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.level_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.gold_) -
      reinterpret_cast<char*>(&_impl_.level_)) + sizeof(_impl_.gold_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MyPlayerDetailInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MyPlayerDetailInfo& this_ = static_cast<const MyPlayerDetailInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MyPlayerDetailInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MyPlayerDetailInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.MyPlayerDetailInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // int32 level = 1;
          if (this_._internal_level() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_level(), target);
          }

          // int32 job_code = 2;
          if (this_._internal_job_code() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_job_code(), target);
          }

          // int64 exp = 3;
          if (this_._internal_exp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_exp(), target);
          }

          // int32 hp = 4;
          if (this_._internal_hp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_hp(), target);
          }

          // int32 max_hp = 5;
          if (this_._internal_max_hp() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_max_hp(), target);
          }

          // int32 damage = 6;
          if (this_._internal_damage() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<6>(
                    stream, this_._internal_damage(), target);
          }

          // int32 defense = 7;
          if (this_._internal_defense() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_defense(), target);
          }

          // int64 gold = 8;
          if (this_._internal_gold() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<8>(
                    stream, this_._internal_gold(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.MyPlayerDetailInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MyPlayerDetailInfo::ByteSizeLong(const MessageLite& base) {
          const MyPlayerDetailInfo& this_ = static_cast<const MyPlayerDetailInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MyPlayerDetailInfo::ByteSizeLong() const {
          const MyPlayerDetailInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.MyPlayerDetailInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // int32 level = 1;
            if (this_._internal_level() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_level());
            }
            // int32 job_code = 2;
            if (this_._internal_job_code() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_job_code());
            }
            // int64 exp = 3;
            if (this_._internal_exp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_exp());
            }
            // int32 hp = 4;
            if (this_._internal_hp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_hp());
            }
            // int32 max_hp = 5;
            if (this_._internal_max_hp() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_max_hp());
            }
            // int32 damage = 6;
            if (this_._internal_damage() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_damage());
            }
            // int32 defense = 7;
            if (this_._internal_defense() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_defense());
            }
            // int64 gold = 8;
            if (this_._internal_gold() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_gold());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MyPlayerDetailInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MyPlayerDetailInfo*>(&to_msg);
  auto& from = static_cast<const MyPlayerDetailInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.MyPlayerDetailInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_level() != 0) {
    _this->_impl_.level_ = from._impl_.level_;
  }
  if (from._internal_job_code() != 0) {
    _this->_impl_.job_code_ = from._impl_.job_code_;
  }
  if (from._internal_exp() != 0) {
    _this->_impl_.exp_ = from._impl_.exp_;
  }
  if (from._internal_hp() != 0) {
    _this->_impl_.hp_ = from._impl_.hp_;
  }
  if (from._internal_max_hp() != 0) {
    _this->_impl_.max_hp_ = from._impl_.max_hp_;
  }
  if (from._internal_damage() != 0) {
    _this->_impl_.damage_ = from._impl_.damage_;
  }
  if (from._internal_defense() != 0) {
    _this->_impl_.defense_ = from._impl_.defense_;
  }
  if (from._internal_gold() != 0) {
    _this->_impl_.gold_ = from._impl_.gold_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MyPlayerDetailInfo::CopyFrom(const MyPlayerDetailInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.MyPlayerDetailInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MyPlayerDetailInfo::InternalSwap(MyPlayerDetailInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.gold_)
      + sizeof(MyPlayerDetailInfo::_impl_.gold_)
      - PROTOBUF_FIELD_OFFSET(MyPlayerDetailInfo, _impl_.level_)>(
          reinterpret_cast<char*>(&_impl_.level_),
          reinterpret_cast<char*>(&other->_impl_.level_));
}

::google::protobuf::Metadata MyPlayerDetailInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_Ping::_Internal {
 public:
};

CSP_Ping::CSP_Ping(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_Ping)
}
CSP_Ping::CSP_Ping(
    ::google::protobuf::Arena* arena, const CSP_Ping& from)
    : CSP_Ping(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CSP_Ping::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CSP_Ping::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, number_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::number_));
}
CSP_Ping::~CSP_Ping() {
  // @@protoc_insertion_point(destructor:jhnet.CSP_Ping)
  SharedDtor(*this);
}
inline void CSP_Ping::SharedDtor(MessageLite& self) {
  CSP_Ping& this_ = static_cast<CSP_Ping&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* CSP_Ping::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_Ping(arena);
}
constexpr auto CSP_Ping::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSP_Ping),
                                            alignof(CSP_Ping));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_Ping::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_Ping_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_Ping::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CSP_Ping>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_Ping::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CSP_Ping>(), &CSP_Ping::ByteSizeLong,
            &CSP_Ping::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_._cached_size_),
        false,
    },
    &CSP_Ping::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_Ping::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CSP_Ping::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_Ping>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CSP_Ping, _impl_.timestamp_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_.timestamp_)}},
    // uint32 number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSP_Ping, _impl_.number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_.number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 number = 1;
    {PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_.number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CSP_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CSP_Ping)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.number_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.number_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CSP_Ping::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CSP_Ping& this_ = static_cast<const CSP_Ping&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CSP_Ping::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CSP_Ping& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CSP_Ping)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 number = 1;
          if (this_._internal_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_number(), target);
          }

          // uint64 timestamp = 2;
          if (this_._internal_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_timestamp(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CSP_Ping)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CSP_Ping::ByteSizeLong(const MessageLite& base) {
          const CSP_Ping& this_ = static_cast<const CSP_Ping&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CSP_Ping::ByteSizeLong() const {
          const CSP_Ping& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CSP_Ping)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint64 timestamp = 2;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp());
            }
            // uint32 number = 1;
            if (this_._internal_number() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CSP_Ping::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSP_Ping*>(&to_msg);
  auto& from = static_cast<const CSP_Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CSP_Ping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_number() != 0) {
    _this->_impl_.number_ = from._impl_.number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSP_Ping::CopyFrom(const CSP_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CSP_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSP_Ping::InternalSwap(CSP_Ping* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_.number_)
      + sizeof(CSP_Ping::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(CSP_Ping, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata CSP_Ping::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_Echo::_Internal {
 public:
};

CSP_Echo::CSP_Echo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_Echo)
}
inline PROTOBUF_NDEBUG_INLINE CSP_Echo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::CSP_Echo& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

CSP_Echo::CSP_Echo(
    ::google::protobuf::Arena* arena,
    const CSP_Echo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSP_Echo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.number_ = from._impl_.number_;

  // @@protoc_insertion_point(copy_constructor:jhnet.CSP_Echo)
}
inline PROTOBUF_NDEBUG_INLINE CSP_Echo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void CSP_Echo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.number_ = {};
}
CSP_Echo::~CSP_Echo() {
  // @@protoc_insertion_point(destructor:jhnet.CSP_Echo)
  SharedDtor(*this);
}
inline void CSP_Echo::SharedDtor(MessageLite& self) {
  CSP_Echo& this_ = static_cast<CSP_Echo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CSP_Echo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_Echo(arena);
}
constexpr auto CSP_Echo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CSP_Echo),
                                            alignof(CSP_Echo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_Echo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_Echo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_Echo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CSP_Echo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_Echo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CSP_Echo>(), &CSP_Echo::ByteSizeLong,
            &CSP_Echo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_Echo, _impl_._cached_size_),
        false,
    },
    &CSP_Echo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_Echo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 30, 2> CSP_Echo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_Echo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_Echo, _impl_.message_)}},
    // uint32 number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSP_Echo, _impl_.number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_Echo, _impl_.number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 number = 1;
    {PROTOBUF_FIELD_OFFSET(CSP_Echo, _impl_.number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(CSP_Echo, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\7\0\0\0\0\0"
    "jhnet.CSP_Echo"
    "message"
  }},
};

PROTOBUF_NOINLINE void CSP_Echo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CSP_Echo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.number_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CSP_Echo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CSP_Echo& this_ = static_cast<const CSP_Echo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CSP_Echo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CSP_Echo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CSP_Echo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 number = 1;
          if (this_._internal_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_number(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.CSP_Echo.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CSP_Echo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CSP_Echo::ByteSizeLong(const MessageLite& base) {
          const CSP_Echo& this_ = static_cast<const CSP_Echo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CSP_Echo::ByteSizeLong() const {
          const CSP_Echo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CSP_Echo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // uint32 number = 1;
            if (this_._internal_number() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CSP_Echo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSP_Echo*>(&to_msg);
  auto& from = static_cast<const CSP_Echo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CSP_Echo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_number() != 0) {
    _this->_impl_.number_ = from._impl_.number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSP_Echo::CopyFrom(const CSP_Echo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CSP_Echo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSP_Echo::InternalSwap(CSP_Echo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.number_, other->_impl_.number_);
}

::google::protobuf::Metadata CSP_Echo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_Login::_Internal {
 public:
};

CSP_Login::CSP_Login(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_Login)
}
inline PROTOBUF_NDEBUG_INLINE CSP_Login::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::CSP_Login& from_msg)
      : login_id_(arena, from.login_id_),
        login_pw_(arena, from.login_pw_),
        _cached_size_{0} {}

CSP_Login::CSP_Login(
    ::google::protobuf::Arena* arena,
    const CSP_Login& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSP_Login* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:jhnet.CSP_Login)
}
inline PROTOBUF_NDEBUG_INLINE CSP_Login::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : login_id_(arena),
        login_pw_(arena),
        _cached_size_{0} {}

inline void CSP_Login::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CSP_Login::~CSP_Login() {
  // @@protoc_insertion_point(destructor:jhnet.CSP_Login)
  SharedDtor(*this);
}
inline void CSP_Login::SharedDtor(MessageLite& self) {
  CSP_Login& this_ = static_cast<CSP_Login&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.login_id_.Destroy();
  this_._impl_.login_pw_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CSP_Login::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_Login(arena);
}
constexpr auto CSP_Login::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CSP_Login),
                                            alignof(CSP_Login));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_Login::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_Login_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_Login::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CSP_Login>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_Login::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CSP_Login>(), &CSP_Login::ByteSizeLong,
            &CSP_Login::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_Login, _impl_._cached_size_),
        false,
    },
    &CSP_Login::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_Login::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 40, 2> CSP_Login::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_Login>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string login_pw = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_Login, _impl_.login_pw_)}},
    // string login_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_Login, _impl_.login_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string login_id = 1;
    {PROTOBUF_FIELD_OFFSET(CSP_Login, _impl_.login_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string login_pw = 2;
    {PROTOBUF_FIELD_OFFSET(CSP_Login, _impl_.login_pw_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\10\10\0\0\0\0\0"
    "jhnet.CSP_Login"
    "login_id"
    "login_pw"
  }},
};

PROTOBUF_NOINLINE void CSP_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CSP_Login)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.login_id_.ClearToEmpty();
  _impl_.login_pw_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CSP_Login::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CSP_Login& this_ = static_cast<const CSP_Login&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CSP_Login::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CSP_Login& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CSP_Login)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string login_id = 1;
          if (!this_._internal_login_id().empty()) {
            const std::string& _s = this_._internal_login_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.CSP_Login.login_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string login_pw = 2;
          if (!this_._internal_login_pw().empty()) {
            const std::string& _s = this_._internal_login_pw();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.CSP_Login.login_pw");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CSP_Login)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CSP_Login::ByteSizeLong(const MessageLite& base) {
          const CSP_Login& this_ = static_cast<const CSP_Login&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CSP_Login::ByteSizeLong() const {
          const CSP_Login& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CSP_Login)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string login_id = 1;
            if (!this_._internal_login_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_login_id());
            }
            // string login_pw = 2;
            if (!this_._internal_login_pw().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_login_pw());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CSP_Login::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSP_Login*>(&to_msg);
  auto& from = static_cast<const CSP_Login&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CSP_Login)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_login_id().empty()) {
    _this->_internal_set_login_id(from._internal_login_id());
  }
  if (!from._internal_login_pw().empty()) {
    _this->_internal_set_login_pw(from._internal_login_pw());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSP_Login::CopyFrom(const CSP_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CSP_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSP_Login::InternalSwap(CSP_Login* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_id_, &other->_impl_.login_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.login_pw_, &other->_impl_.login_pw_, arena);
}

::google::protobuf::Metadata CSP_Login::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_CharList::_Internal {
 public:
};

CSP_CharList::CSP_CharList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_CharList)
}
CSP_CharList::CSP_CharList(
    ::google::protobuf::Arena* arena,
    const CSP_CharList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSP_CharList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:jhnet.CSP_CharList)
}

inline void* CSP_CharList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_CharList(arena);
}
constexpr auto CSP_CharList::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSP_CharList),
                                            alignof(CSP_CharList));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_CharList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_CharList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_CharList::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<CSP_CharList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_CharList::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<CSP_CharList>(), &CSP_CharList::ByteSizeLong,
            &CSP_CharList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_CharList, _impl_._cached_size_),
        false,
    },
    &CSP_CharList::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_CharList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> CSP_CharList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_CharList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata CSP_CharList::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_CreateChar::_Internal {
 public:
};

CSP_CreateChar::CSP_CreateChar(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_CreateChar)
}
inline PROTOBUF_NDEBUG_INLINE CSP_CreateChar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::CSP_CreateChar& from_msg)
      : name_(arena, from.name_),
        _cached_size_{0} {}

CSP_CreateChar::CSP_CreateChar(
    ::google::protobuf::Arena* arena,
    const CSP_CreateChar& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSP_CreateChar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.job_code_ = from._impl_.job_code_;

  // @@protoc_insertion_point(copy_constructor:jhnet.CSP_CreateChar)
}
inline PROTOBUF_NDEBUG_INLINE CSP_CreateChar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : name_(arena),
        _cached_size_{0} {}

inline void CSP_CreateChar::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.job_code_ = {};
}
CSP_CreateChar::~CSP_CreateChar() {
  // @@protoc_insertion_point(destructor:jhnet.CSP_CreateChar)
  SharedDtor(*this);
}
inline void CSP_CreateChar::SharedDtor(MessageLite& self) {
  CSP_CreateChar& this_ = static_cast<CSP_CreateChar&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CSP_CreateChar::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_CreateChar(arena);
}
constexpr auto CSP_CreateChar::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CSP_CreateChar),
                                            alignof(CSP_CreateChar));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_CreateChar::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_CreateChar_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_CreateChar::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CSP_CreateChar>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_CreateChar::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CSP_CreateChar>(), &CSP_CreateChar::ByteSizeLong,
            &CSP_CreateChar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_CreateChar, _impl_._cached_size_),
        false,
    },
    &CSP_CreateChar::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_CreateChar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 33, 2> CSP_CreateChar::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_CreateChar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // int32 job_code = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CSP_CreateChar, _impl_.job_code_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_CreateChar, _impl_.job_code_)}},
    // string name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_CreateChar, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string name = 1;
    {PROTOBUF_FIELD_OFFSET(CSP_CreateChar, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 job_code = 2;
    {PROTOBUF_FIELD_OFFSET(CSP_CreateChar, _impl_.job_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
    "\24\4\0\0\0\0\0\0"
    "jhnet.CSP_CreateChar"
    "name"
  }},
};

PROTOBUF_NOINLINE void CSP_CreateChar::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CSP_CreateChar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.job_code_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CSP_CreateChar::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CSP_CreateChar& this_ = static_cast<const CSP_CreateChar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CSP_CreateChar::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CSP_CreateChar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CSP_CreateChar)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string name = 1;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.CSP_CreateChar.name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // int32 job_code = 2;
          if (this_._internal_job_code() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_job_code(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CSP_CreateChar)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CSP_CreateChar::ByteSizeLong(const MessageLite& base) {
          const CSP_CreateChar& this_ = static_cast<const CSP_CreateChar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CSP_CreateChar::ByteSizeLong() const {
          const CSP_CreateChar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CSP_CreateChar)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string name = 1;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // int32 job_code = 2;
            if (this_._internal_job_code() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_job_code());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CSP_CreateChar::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSP_CreateChar*>(&to_msg);
  auto& from = static_cast<const CSP_CreateChar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CSP_CreateChar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_job_code() != 0) {
    _this->_impl_.job_code_ = from._impl_.job_code_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSP_CreateChar::CopyFrom(const CSP_CreateChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CSP_CreateChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSP_CreateChar::InternalSwap(CSP_CreateChar* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
        swap(_impl_.job_code_, other->_impl_.job_code_);
}

::google::protobuf::Metadata CSP_CreateChar::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_SelectChar::_Internal {
 public:
};

CSP_SelectChar::CSP_SelectChar(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_SelectChar)
}
CSP_SelectChar::CSP_SelectChar(
    ::google::protobuf::Arena* arena, const CSP_SelectChar& from)
    : CSP_SelectChar(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE CSP_SelectChar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CSP_SelectChar::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.character_uid_ = {};
}
CSP_SelectChar::~CSP_SelectChar() {
  // @@protoc_insertion_point(destructor:jhnet.CSP_SelectChar)
  SharedDtor(*this);
}
inline void CSP_SelectChar::SharedDtor(MessageLite& self) {
  CSP_SelectChar& this_ = static_cast<CSP_SelectChar&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* CSP_SelectChar::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_SelectChar(arena);
}
constexpr auto CSP_SelectChar::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSP_SelectChar),
                                            alignof(CSP_SelectChar));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_SelectChar::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_SelectChar_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_SelectChar::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CSP_SelectChar>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_SelectChar::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CSP_SelectChar>(), &CSP_SelectChar::ByteSizeLong,
            &CSP_SelectChar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_SelectChar, _impl_._cached_size_),
        false,
    },
    &CSP_SelectChar::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_SelectChar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> CSP_SelectChar::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_SelectChar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 character_uid = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(CSP_SelectChar, _impl_.character_uid_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(CSP_SelectChar, _impl_.character_uid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 character_uid = 1;
    {PROTOBUF_FIELD_OFFSET(CSP_SelectChar, _impl_.character_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void CSP_SelectChar::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CSP_SelectChar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.character_uid_ = ::uint64_t{0u};
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CSP_SelectChar::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CSP_SelectChar& this_ = static_cast<const CSP_SelectChar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CSP_SelectChar::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CSP_SelectChar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CSP_SelectChar)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 character_uid = 1;
          if (this_._internal_character_uid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_character_uid(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CSP_SelectChar)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CSP_SelectChar::ByteSizeLong(const MessageLite& base) {
          const CSP_SelectChar& this_ = static_cast<const CSP_SelectChar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CSP_SelectChar::ByteSizeLong() const {
          const CSP_SelectChar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CSP_SelectChar)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // uint64 character_uid = 1;
            if (this_._internal_character_uid() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_character_uid());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CSP_SelectChar::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSP_SelectChar*>(&to_msg);
  auto& from = static_cast<const CSP_SelectChar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CSP_SelectChar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_character_uid() != 0) {
    _this->_impl_.character_uid_ = from._impl_.character_uid_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSP_SelectChar::CopyFrom(const CSP_SelectChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CSP_SelectChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSP_SelectChar::InternalSwap(CSP_SelectChar* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
        swap(_impl_.character_uid_, other->_impl_.character_uid_);
}

::google::protobuf::Metadata CSP_SelectChar::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_MapLoadEnd::_Internal {
 public:
};

CSP_MapLoadEnd::CSP_MapLoadEnd(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_MapLoadEnd)
}
CSP_MapLoadEnd::CSP_MapLoadEnd(
    ::google::protobuf::Arena* arena,
    const CSP_MapLoadEnd& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSP_MapLoadEnd* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:jhnet.CSP_MapLoadEnd)
}

inline void* CSP_MapLoadEnd::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_MapLoadEnd(arena);
}
constexpr auto CSP_MapLoadEnd::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSP_MapLoadEnd),
                                            alignof(CSP_MapLoadEnd));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_MapLoadEnd::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_MapLoadEnd_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_MapLoadEnd::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<CSP_MapLoadEnd>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_MapLoadEnd::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<CSP_MapLoadEnd>(), &CSP_MapLoadEnd::ByteSizeLong,
            &CSP_MapLoadEnd::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_MapLoadEnd, _impl_._cached_size_),
        false,
    },
    &CSP_MapLoadEnd::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_MapLoadEnd::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> CSP_MapLoadEnd::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_MapLoadEnd>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata CSP_MapLoadEnd::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CSP_Move::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CSP_Move>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CSP_Move, _impl_._has_bits_);
};

CSP_Move::CSP_Move(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.CSP_Move)
}
inline PROTOBUF_NDEBUG_INLINE CSP_Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::CSP_Move& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CSP_Move::CSP_Move(
    ::google::protobuf::Arena* arena,
    const CSP_Move& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CSP_Move* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pos_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(
                              arena, *from._impl_.pos_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:jhnet.CSP_Move)
}
inline PROTOBUF_NDEBUG_INLINE CSP_Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CSP_Move::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.pos_info_ = {};
}
CSP_Move::~CSP_Move() {
  // @@protoc_insertion_point(destructor:jhnet.CSP_Move)
  SharedDtor(*this);
}
inline void CSP_Move::SharedDtor(MessageLite& self) {
  CSP_Move& this_ = static_cast<CSP_Move&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pos_info_;
  this_._impl_.~Impl_();
}

inline void* CSP_Move::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CSP_Move(arena);
}
constexpr auto CSP_Move::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CSP_Move),
                                            alignof(CSP_Move));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CSP_Move::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CSP_Move_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CSP_Move::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CSP_Move>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CSP_Move::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CSP_Move>(), &CSP_Move::ByteSizeLong,
            &CSP_Move::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CSP_Move, _impl_._cached_size_),
        false,
    },
    &CSP_Move::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CSP_Move::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CSP_Move::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CSP_Move, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::CSP_Move>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .jhnet.PosInfo pos_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CSP_Move, _impl_.pos_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .jhnet.PosInfo pos_info = 1;
    {PROTOBUF_FIELD_OFFSET(CSP_Move, _impl_.pos_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::PosInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CSP_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.CSP_Move)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pos_info_ != nullptr);
    _impl_.pos_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CSP_Move::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CSP_Move& this_ = static_cast<const CSP_Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CSP_Move::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CSP_Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.CSP_Move)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .jhnet.PosInfo pos_info = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.pos_info_, this_._impl_.pos_info_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.CSP_Move)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CSP_Move::ByteSizeLong(const MessageLite& base) {
          const CSP_Move& this_ = static_cast<const CSP_Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CSP_Move::ByteSizeLong() const {
          const CSP_Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.CSP_Move)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .jhnet.PosInfo pos_info = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pos_info_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CSP_Move::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CSP_Move*>(&to_msg);
  auto& from = static_cast<const CSP_Move&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.CSP_Move)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pos_info_ != nullptr);
    if (_this->_impl_.pos_info_ == nullptr) {
      _this->_impl_.pos_info_ =
          ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(arena, *from._impl_.pos_info_);
    } else {
      _this->_impl_.pos_info_->MergeFrom(*from._impl_.pos_info_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CSP_Move::CopyFrom(const CSP_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.CSP_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CSP_Move::InternalSwap(CSP_Move* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.pos_info_, other->_impl_.pos_info_);
}

::google::protobuf::Metadata CSP_Move::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_Ping::_Internal {
 public:
};

SCP_Ping::SCP_Ping(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_Ping)
}
SCP_Ping::SCP_Ping(
    ::google::protobuf::Arena* arena, const SCP_Ping& from)
    : SCP_Ping(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE SCP_Ping::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SCP_Ping::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, timestamp_),
           0,
           offsetof(Impl_, number_) -
               offsetof(Impl_, timestamp_) +
               sizeof(Impl_::number_));
}
SCP_Ping::~SCP_Ping() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_Ping)
  SharedDtor(*this);
}
inline void SCP_Ping::SharedDtor(MessageLite& self) {
  SCP_Ping& this_ = static_cast<SCP_Ping&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SCP_Ping::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_Ping(arena);
}
constexpr auto SCP_Ping::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SCP_Ping),
                                            alignof(SCP_Ping));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_Ping::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_Ping_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_Ping::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_Ping>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_Ping::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_Ping>(), &SCP_Ping::ByteSizeLong,
            &SCP_Ping::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_._cached_size_),
        false,
    },
    &SCP_Ping::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_Ping::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SCP_Ping::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_Ping>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // uint64 timestamp = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SCP_Ping, _impl_.timestamp_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_.timestamp_)}},
    // uint32 number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SCP_Ping, _impl_.number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_.number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 number = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_.number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // uint64 timestamp = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_.timestamp_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SCP_Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_Ping)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.timestamp_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.number_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.number_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_Ping::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_Ping& this_ = static_cast<const SCP_Ping&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_Ping::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_Ping& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_Ping)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 number = 1;
          if (this_._internal_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_number(), target);
          }

          // uint64 timestamp = 2;
          if (this_._internal_timestamp() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                2, this_._internal_timestamp(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_Ping)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_Ping::ByteSizeLong(const MessageLite& base) {
          const SCP_Ping& this_ = static_cast<const SCP_Ping&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_Ping::ByteSizeLong() const {
          const SCP_Ping& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_Ping)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // uint64 timestamp = 2;
            if (this_._internal_timestamp() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_timestamp());
            }
            // uint32 number = 1;
            if (this_._internal_number() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_Ping::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_Ping*>(&to_msg);
  auto& from = static_cast<const SCP_Ping&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_Ping)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_timestamp() != 0) {
    _this->_impl_.timestamp_ = from._impl_.timestamp_;
  }
  if (from._internal_number() != 0) {
    _this->_impl_.number_ = from._impl_.number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_Ping::CopyFrom(const SCP_Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_Ping::InternalSwap(SCP_Ping* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_.number_)
      + sizeof(SCP_Ping::_impl_.number_)
      - PROTOBUF_FIELD_OFFSET(SCP_Ping, _impl_.timestamp_)>(
          reinterpret_cast<char*>(&_impl_.timestamp_),
          reinterpret_cast<char*>(&other->_impl_.timestamp_));
}

::google::protobuf::Metadata SCP_Ping::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_Echo::_Internal {
 public:
};

SCP_Echo::SCP_Echo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_Echo)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Echo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_Echo& from_msg)
      : message_(arena, from.message_),
        _cached_size_{0} {}

SCP_Echo::SCP_Echo(
    ::google::protobuf::Arena* arena,
    const SCP_Echo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_Echo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.number_ = from._impl_.number_;

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_Echo)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Echo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : message_(arena),
        _cached_size_{0} {}

inline void SCP_Echo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.number_ = {};
}
SCP_Echo::~SCP_Echo() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_Echo)
  SharedDtor(*this);
}
inline void SCP_Echo::SharedDtor(MessageLite& self) {
  SCP_Echo& this_ = static_cast<SCP_Echo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SCP_Echo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_Echo(arena);
}
constexpr auto SCP_Echo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SCP_Echo),
                                            alignof(SCP_Echo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_Echo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_Echo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_Echo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_Echo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_Echo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_Echo>(), &SCP_Echo::ByteSizeLong,
            &SCP_Echo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_Echo, _impl_._cached_size_),
        false,
    },
    &SCP_Echo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_Echo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 30, 2> SCP_Echo::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_Echo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Echo, _impl_.message_)}},
    // uint32 number = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SCP_Echo, _impl_.number_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Echo, _impl_.number_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint32 number = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_Echo, _impl_.number_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // string message = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_Echo, _impl_.message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\16\0\7\0\0\0\0\0"
    "jhnet.SCP_Echo"
    "message"
  }},
};

PROTOBUF_NOINLINE void SCP_Echo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_Echo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.message_.ClearToEmpty();
  _impl_.number_ = 0u;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_Echo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_Echo& this_ = static_cast<const SCP_Echo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_Echo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_Echo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_Echo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint32 number = 1;
          if (this_._internal_number() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                1, this_._internal_number(), target);
          }

          // string message = 2;
          if (!this_._internal_message().empty()) {
            const std::string& _s = this_._internal_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.SCP_Echo.message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_Echo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_Echo::ByteSizeLong(const MessageLite& base) {
          const SCP_Echo& this_ = static_cast<const SCP_Echo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_Echo::ByteSizeLong() const {
          const SCP_Echo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_Echo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string message = 2;
            if (!this_._internal_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_message());
            }
            // uint32 number = 1;
            if (this_._internal_number() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_number());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_Echo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_Echo*>(&to_msg);
  auto& from = static_cast<const SCP_Echo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_Echo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _this->_internal_set_message(from._internal_message());
  }
  if (from._internal_number() != 0) {
    _this->_impl_.number_ = from._impl_.number_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_Echo::CopyFrom(const SCP_Echo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_Echo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_Echo::InternalSwap(SCP_Echo* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, &other->_impl_.message_, arena);
        swap(_impl_.number_, other->_impl_.number_);
}

::google::protobuf::Metadata SCP_Echo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_Login::_Internal {
 public:
};

SCP_Login::SCP_Login(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_Login)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Login::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_Login& from_msg)
      : error_message_(arena, from.error_message_),
        _cached_size_{0} {}

SCP_Login::SCP_Login(
    ::google::protobuf::Arena* arena,
    const SCP_Login& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_Login* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, login_ok_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, login_ok_),
           offsetof(Impl_, account_uid_) -
               offsetof(Impl_, login_ok_) +
               sizeof(Impl_::account_uid_));

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_Login)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Login::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : error_message_(arena),
        _cached_size_{0} {}

inline void SCP_Login::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, login_ok_),
           0,
           offsetof(Impl_, account_uid_) -
               offsetof(Impl_, login_ok_) +
               sizeof(Impl_::account_uid_));
}
SCP_Login::~SCP_Login() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_Login)
  SharedDtor(*this);
}
inline void SCP_Login::SharedDtor(MessageLite& self) {
  SCP_Login& this_ = static_cast<SCP_Login&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SCP_Login::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_Login(arena);
}
constexpr auto SCP_Login::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SCP_Login),
                                            alignof(SCP_Login));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_Login::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_Login_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_Login::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_Login>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_Login::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_Login>(), &SCP_Login::ByteSizeLong,
            &SCP_Login::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_._cached_size_),
        false,
    },
    &SCP_Login::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_Login::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 37, 2> SCP_Login::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_Login>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // bool login_ok = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SCP_Login, _impl_.login_ok_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.login_ok_)}},
    // string error_message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.error_message_)}},
    // uint32 account_uid = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SCP_Login, _impl_.account_uid_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.account_uid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool login_ok = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.login_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_message = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 account_uid = 3;
    {PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.account_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\17\0\15\0\0\0\0\0"
    "jhnet.SCP_Login"
    "error_message"
  }},
};

PROTOBUF_NOINLINE void SCP_Login::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_Login)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  ::memset(&_impl_.login_ok_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.account_uid_) -
      reinterpret_cast<char*>(&_impl_.login_ok_)) + sizeof(_impl_.account_uid_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_Login::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_Login& this_ = static_cast<const SCP_Login&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_Login::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_Login& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_Login)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool login_ok = 1;
          if (this_._internal_login_ok() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_login_ok(), target);
          }

          // string error_message = 2;
          if (!this_._internal_error_message().empty()) {
            const std::string& _s = this_._internal_error_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.SCP_Login.error_message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // uint32 account_uid = 3;
          if (this_._internal_account_uid() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
                3, this_._internal_account_uid(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_Login)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_Login::ByteSizeLong(const MessageLite& base) {
          const SCP_Login& this_ = static_cast<const SCP_Login&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_Login::ByteSizeLong() const {
          const SCP_Login& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_Login)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string error_message = 2;
            if (!this_._internal_error_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_message());
            }
            // bool login_ok = 1;
            if (this_._internal_login_ok() != 0) {
              total_size += 2;
            }
            // uint32 account_uid = 3;
            if (this_._internal_account_uid() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
                  this_._internal_account_uid());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_Login::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_Login*>(&to_msg);
  auto& from = static_cast<const SCP_Login&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_Login)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_login_ok() != 0) {
    _this->_impl_.login_ok_ = from._impl_.login_ok_;
  }
  if (from._internal_account_uid() != 0) {
    _this->_impl_.account_uid_ = from._impl_.account_uid_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_Login::CopyFrom(const SCP_Login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_Login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_Login::InternalSwap(SCP_Login* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.account_uid_)
      + sizeof(SCP_Login::_impl_.account_uid_)
      - PROTOBUF_FIELD_OFFSET(SCP_Login, _impl_.login_ok_)>(
          reinterpret_cast<char*>(&_impl_.login_ok_),
          reinterpret_cast<char*>(&other->_impl_.login_ok_));
}

::google::protobuf::Metadata SCP_Login::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_CreateChar::_Internal {
 public:
};

SCP_CreateChar::SCP_CreateChar(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_CreateChar)
}
inline PROTOBUF_NDEBUG_INLINE SCP_CreateChar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_CreateChar& from_msg)
      : error_message_(arena, from.error_message_),
        _cached_size_{0} {}

SCP_CreateChar::SCP_CreateChar(
    ::google::protobuf::Arena* arena,
    const SCP_CreateChar& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_CreateChar* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.create_ok_ = from._impl_.create_ok_;

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_CreateChar)
}
inline PROTOBUF_NDEBUG_INLINE SCP_CreateChar::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : error_message_(arena),
        _cached_size_{0} {}

inline void SCP_CreateChar::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.create_ok_ = {};
}
SCP_CreateChar::~SCP_CreateChar() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_CreateChar)
  SharedDtor(*this);
}
inline void SCP_CreateChar::SharedDtor(MessageLite& self) {
  SCP_CreateChar& this_ = static_cast<SCP_CreateChar&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SCP_CreateChar::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_CreateChar(arena);
}
constexpr auto SCP_CreateChar::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SCP_CreateChar),
                                            alignof(SCP_CreateChar));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_CreateChar::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_CreateChar_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_CreateChar::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_CreateChar>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_CreateChar::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_CreateChar>(), &SCP_CreateChar::ByteSizeLong,
            &SCP_CreateChar::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_CreateChar, _impl_._cached_size_),
        false,
    },
    &SCP_CreateChar::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_CreateChar::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 42, 2> SCP_CreateChar::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_CreateChar>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string error_message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_CreateChar, _impl_.error_message_)}},
    // bool create_ok = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SCP_CreateChar, _impl_.create_ok_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_CreateChar, _impl_.create_ok_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool create_ok = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_CreateChar, _impl_.create_ok_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_message = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_CreateChar, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\24\0\15\0\0\0\0\0"
    "jhnet.SCP_CreateChar"
    "error_message"
  }},
};

PROTOBUF_NOINLINE void SCP_CreateChar::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_CreateChar)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.create_ok_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_CreateChar::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_CreateChar& this_ = static_cast<const SCP_CreateChar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_CreateChar::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_CreateChar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_CreateChar)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool create_ok = 1;
          if (this_._internal_create_ok() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_create_ok(), target);
          }

          // string error_message = 2;
          if (!this_._internal_error_message().empty()) {
            const std::string& _s = this_._internal_error_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.SCP_CreateChar.error_message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_CreateChar)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_CreateChar::ByteSizeLong(const MessageLite& base) {
          const SCP_CreateChar& this_ = static_cast<const SCP_CreateChar&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_CreateChar::ByteSizeLong() const {
          const SCP_CreateChar& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_CreateChar)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string error_message = 2;
            if (!this_._internal_error_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_message());
            }
            // bool create_ok = 1;
            if (this_._internal_create_ok() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_CreateChar::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_CreateChar*>(&to_msg);
  auto& from = static_cast<const SCP_CreateChar&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_CreateChar)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_create_ok() != 0) {
    _this->_impl_.create_ok_ = from._impl_.create_ok_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_CreateChar::CopyFrom(const SCP_CreateChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_CreateChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_CreateChar::InternalSwap(SCP_CreateChar* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
        swap(_impl_.create_ok_, other->_impl_.create_ok_);
}

::google::protobuf::Metadata SCP_CreateChar::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_CharList::_Internal {
 public:
};

SCP_CharList::SCP_CharList(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_CharList)
}
inline PROTOBUF_NDEBUG_INLINE SCP_CharList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_CharList& from_msg)
      : characters_{visibility, arena, from.characters_},
        _cached_size_{0} {}

SCP_CharList::SCP_CharList(
    ::google::protobuf::Arena* arena,
    const SCP_CharList& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_CharList* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_CharList)
}
inline PROTOBUF_NDEBUG_INLINE SCP_CharList::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : characters_{visibility, arena},
        _cached_size_{0} {}

inline void SCP_CharList::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SCP_CharList::~SCP_CharList() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_CharList)
  SharedDtor(*this);
}
inline void SCP_CharList::SharedDtor(MessageLite& self) {
  SCP_CharList& this_ = static_cast<SCP_CharList&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SCP_CharList::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_CharList(arena);
}
constexpr auto SCP_CharList::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SCP_CharList, _impl_.characters_) +
          decltype(SCP_CharList::_impl_.characters_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SCP_CharList), alignof(SCP_CharList), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SCP_CharList::PlacementNew_,
                                 sizeof(SCP_CharList),
                                 alignof(SCP_CharList));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_CharList::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_CharList_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_CharList::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_CharList>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_CharList::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_CharList>(), &SCP_CharList::ByteSizeLong,
            &SCP_CharList::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_CharList, _impl_._cached_size_),
        false,
    },
    &SCP_CharList::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_CharList::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SCP_CharList::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_CharList>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .jhnet.CharacterInfo characters = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_CharList, _impl_.characters_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .jhnet.CharacterInfo characters = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_CharList, _impl_.characters_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::CharacterInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SCP_CharList::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_CharList)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.characters_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_CharList::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_CharList& this_ = static_cast<const SCP_CharList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_CharList::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_CharList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_CharList)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .jhnet.CharacterInfo characters = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_characters_size());
               i < n; i++) {
            const auto& repfield = this_._internal_characters().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_CharList)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_CharList::ByteSizeLong(const MessageLite& base) {
          const SCP_CharList& this_ = static_cast<const SCP_CharList&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_CharList::ByteSizeLong() const {
          const SCP_CharList& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_CharList)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .jhnet.CharacterInfo characters = 1;
            {
              total_size += 1UL * this_._internal_characters_size();
              for (const auto& msg : this_._internal_characters()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_CharList::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_CharList*>(&to_msg);
  auto& from = static_cast<const SCP_CharList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_CharList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_characters()->MergeFrom(
      from._internal_characters());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_CharList::CopyFrom(const SCP_CharList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_CharList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_CharList::InternalSwap(SCP_CharList* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.characters_.InternalSwap(&other->_impl_.characters_);
}

::google::protobuf::Metadata SCP_CharList::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_SelectCharResult::_Internal {
 public:
};

SCP_SelectCharResult::SCP_SelectCharResult(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_SelectCharResult)
}
inline PROTOBUF_NDEBUG_INLINE SCP_SelectCharResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_SelectCharResult& from_msg)
      : error_message_(arena, from.error_message_),
        _cached_size_{0} {}

SCP_SelectCharResult::SCP_SelectCharResult(
    ::google::protobuf::Arena* arena,
    const SCP_SelectCharResult& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_SelectCharResult* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.success_ = from._impl_.success_;

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_SelectCharResult)
}
inline PROTOBUF_NDEBUG_INLINE SCP_SelectCharResult::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : error_message_(arena),
        _cached_size_{0} {}

inline void SCP_SelectCharResult::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.success_ = {};
}
SCP_SelectCharResult::~SCP_SelectCharResult() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_SelectCharResult)
  SharedDtor(*this);
}
inline void SCP_SelectCharResult::SharedDtor(MessageLite& self) {
  SCP_SelectCharResult& this_ = static_cast<SCP_SelectCharResult&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.error_message_.Destroy();
  this_._impl_.~Impl_();
}

inline void* SCP_SelectCharResult::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_SelectCharResult(arena);
}
constexpr auto SCP_SelectCharResult::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(SCP_SelectCharResult),
                                            alignof(SCP_SelectCharResult));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_SelectCharResult::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_SelectCharResult_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_SelectCharResult::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_SelectCharResult>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_SelectCharResult::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_SelectCharResult>(), &SCP_SelectCharResult::ByteSizeLong,
            &SCP_SelectCharResult::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_SelectCharResult, _impl_._cached_size_),
        false,
    },
    &SCP_SelectCharResult::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_SelectCharResult::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 48, 2> SCP_SelectCharResult::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_SelectCharResult>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string error_message = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_SelectCharResult, _impl_.error_message_)}},
    // bool success = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(SCP_SelectCharResult, _impl_.success_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_SelectCharResult, _impl_.success_)}},
  }}, {{
    65535, 65535
  }}, {{
    // bool success = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_SelectCharResult, _impl_.success_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string error_message = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_SelectCharResult, _impl_.error_message_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\32\0\15\0\0\0\0\0"
    "jhnet.SCP_SelectCharResult"
    "error_message"
  }},
};

PROTOBUF_NOINLINE void SCP_SelectCharResult::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_SelectCharResult)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_message_.ClearToEmpty();
  _impl_.success_ = false;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_SelectCharResult::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_SelectCharResult& this_ = static_cast<const SCP_SelectCharResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_SelectCharResult::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_SelectCharResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_SelectCharResult)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // bool success = 1;
          if (this_._internal_success() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                1, this_._internal_success(), target);
          }

          // string error_message = 2;
          if (!this_._internal_error_message().empty()) {
            const std::string& _s = this_._internal_error_message();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "jhnet.SCP_SelectCharResult.error_message");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_SelectCharResult)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_SelectCharResult::ByteSizeLong(const MessageLite& base) {
          const SCP_SelectCharResult& this_ = static_cast<const SCP_SelectCharResult&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_SelectCharResult::ByteSizeLong() const {
          const SCP_SelectCharResult& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_SelectCharResult)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string error_message = 2;
            if (!this_._internal_error_message().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_error_message());
            }
            // bool success = 1;
            if (this_._internal_success() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_SelectCharResult::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_SelectCharResult*>(&to_msg);
  auto& from = static_cast<const SCP_SelectCharResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_SelectCharResult)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error_message().empty()) {
    _this->_internal_set_error_message(from._internal_error_message());
  }
  if (from._internal_success() != 0) {
    _this->_impl_.success_ = from._impl_.success_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_SelectCharResult::CopyFrom(const SCP_SelectCharResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_SelectCharResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_SelectCharResult::InternalSwap(SCP_SelectCharResult* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
        swap(_impl_.success_, other->_impl_.success_);
}

::google::protobuf::Metadata SCP_SelectCharResult::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_MyCharacterInfo::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SCP_MyCharacterInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_._has_bits_);
};

SCP_MyCharacterInfo::SCP_MyCharacterInfo(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_MyCharacterInfo)
}
inline PROTOBUF_NDEBUG_INLINE SCP_MyCharacterInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_MyCharacterInfo& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SCP_MyCharacterInfo::SCP_MyCharacterInfo(
    ::google::protobuf::Arena* arena,
    const SCP_MyCharacterInfo& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_MyCharacterInfo* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.my_player_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::jhnet::PlayerInfo>(
                              arena, *from._impl_.my_player_info_)
                        : nullptr;
  _impl_.my_detail_info_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::jhnet::MyPlayerDetailInfo>(
                              arena, *from._impl_.my_detail_info_)
                        : nullptr;
  _impl_.map_id_ = from._impl_.map_id_;

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_MyCharacterInfo)
}
inline PROTOBUF_NDEBUG_INLINE SCP_MyCharacterInfo::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SCP_MyCharacterInfo::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, my_player_info_),
           0,
           offsetof(Impl_, map_id_) -
               offsetof(Impl_, my_player_info_) +
               sizeof(Impl_::map_id_));
}
SCP_MyCharacterInfo::~SCP_MyCharacterInfo() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_MyCharacterInfo)
  SharedDtor(*this);
}
inline void SCP_MyCharacterInfo::SharedDtor(MessageLite& self) {
  SCP_MyCharacterInfo& this_ = static_cast<SCP_MyCharacterInfo&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.my_player_info_;
  delete this_._impl_.my_detail_info_;
  this_._impl_.~Impl_();
}

inline void* SCP_MyCharacterInfo::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_MyCharacterInfo(arena);
}
constexpr auto SCP_MyCharacterInfo::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SCP_MyCharacterInfo),
                                            alignof(SCP_MyCharacterInfo));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_MyCharacterInfo::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_MyCharacterInfo_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_MyCharacterInfo::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_MyCharacterInfo>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_MyCharacterInfo::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_MyCharacterInfo>(), &SCP_MyCharacterInfo::ByteSizeLong,
            &SCP_MyCharacterInfo::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_._cached_size_),
        false,
    },
    &SCP_MyCharacterInfo::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_MyCharacterInfo::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 0, 2> SCP_MyCharacterInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_MyCharacterInfo>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .jhnet.PlayerInfo my_player_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.my_player_info_)}},
    // int32 map_id = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SCP_MyCharacterInfo, _impl_.map_id_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.map_id_)}},
    // .jhnet.MyPlayerDetailInfo my_detail_info = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.my_detail_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .jhnet.PlayerInfo my_player_info = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.my_player_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 map_id = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.map_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .jhnet.MyPlayerDetailInfo my_detail_info = 3;
    {PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.my_detail_info_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::PlayerInfo>()},
    {::_pbi::TcParser::GetTable<::jhnet::MyPlayerDetailInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SCP_MyCharacterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_MyCharacterInfo)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.my_player_info_ != nullptr);
      _impl_.my_player_info_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.my_detail_info_ != nullptr);
      _impl_.my_detail_info_->Clear();
    }
  }
  _impl_.map_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_MyCharacterInfo::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_MyCharacterInfo& this_ = static_cast<const SCP_MyCharacterInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_MyCharacterInfo::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_MyCharacterInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_MyCharacterInfo)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .jhnet.PlayerInfo my_player_info = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.my_player_info_, this_._impl_.my_player_info_->GetCachedSize(), target,
                stream);
          }

          // int32 map_id = 2;
          if (this_._internal_map_id() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_map_id(), target);
          }

          // .jhnet.MyPlayerDetailInfo my_detail_info = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.my_detail_info_, this_._impl_.my_detail_info_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_MyCharacterInfo)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_MyCharacterInfo::ByteSizeLong(const MessageLite& base) {
          const SCP_MyCharacterInfo& this_ = static_cast<const SCP_MyCharacterInfo&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_MyCharacterInfo::ByteSizeLong() const {
          const SCP_MyCharacterInfo& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_MyCharacterInfo)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .jhnet.PlayerInfo my_player_info = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.my_player_info_);
            }
            // .jhnet.MyPlayerDetailInfo my_detail_info = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.my_detail_info_);
            }
          }
           {
            // int32 map_id = 2;
            if (this_._internal_map_id() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_map_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_MyCharacterInfo::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_MyCharacterInfo*>(&to_msg);
  auto& from = static_cast<const SCP_MyCharacterInfo&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_MyCharacterInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.my_player_info_ != nullptr);
      if (_this->_impl_.my_player_info_ == nullptr) {
        _this->_impl_.my_player_info_ =
            ::google::protobuf::Message::CopyConstruct<::jhnet::PlayerInfo>(arena, *from._impl_.my_player_info_);
      } else {
        _this->_impl_.my_player_info_->MergeFrom(*from._impl_.my_player_info_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.my_detail_info_ != nullptr);
      if (_this->_impl_.my_detail_info_ == nullptr) {
        _this->_impl_.my_detail_info_ =
            ::google::protobuf::Message::CopyConstruct<::jhnet::MyPlayerDetailInfo>(arena, *from._impl_.my_detail_info_);
      } else {
        _this->_impl_.my_detail_info_->MergeFrom(*from._impl_.my_detail_info_);
      }
    }
  }
  if (from._internal_map_id() != 0) {
    _this->_impl_.map_id_ = from._impl_.map_id_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_MyCharacterInfo::CopyFrom(const SCP_MyCharacterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_MyCharacterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_MyCharacterInfo::InternalSwap(SCP_MyCharacterInfo* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.map_id_)
      + sizeof(SCP_MyCharacterInfo::_impl_.map_id_)
      - PROTOBUF_FIELD_OFFSET(SCP_MyCharacterInfo, _impl_.my_player_info_)>(
          reinterpret_cast<char*>(&_impl_.my_player_info_),
          reinterpret_cast<char*>(&other->_impl_.my_player_info_));
}

::google::protobuf::Metadata SCP_MyCharacterInfo::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_EnterGame::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SCP_EnterGame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_._has_bits_);
};

SCP_EnterGame::SCP_EnterGame(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_EnterGame)
}
inline PROTOBUF_NDEBUG_INLINE SCP_EnterGame::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_EnterGame& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        players_{visibility, arena, from.players_} {}

SCP_EnterGame::SCP_EnterGame(
    ::google::protobuf::Arena* arena,
    const SCP_EnterGame& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_EnterGame* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.my_pos_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(
                              arena, *from._impl_.my_pos_info_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_EnterGame)
}
inline PROTOBUF_NDEBUG_INLINE SCP_EnterGame::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        players_{visibility, arena} {}

inline void SCP_EnterGame::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.my_pos_info_ = {};
}
SCP_EnterGame::~SCP_EnterGame() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_EnterGame)
  SharedDtor(*this);
}
inline void SCP_EnterGame::SharedDtor(MessageLite& self) {
  SCP_EnterGame& this_ = static_cast<SCP_EnterGame&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.my_pos_info_;
  this_._impl_.~Impl_();
}

inline void* SCP_EnterGame::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_EnterGame(arena);
}
constexpr auto SCP_EnterGame::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_.players_) +
          decltype(SCP_EnterGame::_impl_.players_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SCP_EnterGame), alignof(SCP_EnterGame), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SCP_EnterGame::PlacementNew_,
                                 sizeof(SCP_EnterGame),
                                 alignof(SCP_EnterGame));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_EnterGame::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_EnterGame_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_EnterGame::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_EnterGame>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_EnterGame::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_EnterGame>(), &SCP_EnterGame::ByteSizeLong,
            &SCP_EnterGame::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_._cached_size_),
        false,
    },
    &SCP_EnterGame::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_EnterGame::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> SCP_EnterGame::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_EnterGame>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .jhnet.PlayerInfo players = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 1, PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_.players_)}},
    // .jhnet.PosInfo my_pos_info = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_.my_pos_info_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .jhnet.PosInfo my_pos_info = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_.my_pos_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .jhnet.PlayerInfo players = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_EnterGame, _impl_.players_), -1, 1,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::PosInfo>()},
    {::_pbi::TcParser::GetTable<::jhnet::PlayerInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SCP_EnterGame::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_EnterGame)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.my_pos_info_ != nullptr);
    _impl_.my_pos_info_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_EnterGame::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_EnterGame& this_ = static_cast<const SCP_EnterGame&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_EnterGame::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_EnterGame& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_EnterGame)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .jhnet.PosInfo my_pos_info = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.my_pos_info_, this_._impl_.my_pos_info_->GetCachedSize(), target,
                stream);
          }

          // repeated .jhnet.PlayerInfo players = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_players_size());
               i < n; i++) {
            const auto& repfield = this_._internal_players().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_EnterGame)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_EnterGame::ByteSizeLong(const MessageLite& base) {
          const SCP_EnterGame& this_ = static_cast<const SCP_EnterGame&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_EnterGame::ByteSizeLong() const {
          const SCP_EnterGame& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_EnterGame)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .jhnet.PlayerInfo players = 2;
            {
              total_size += 1UL * this_._internal_players_size();
              for (const auto& msg : this_._internal_players()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .jhnet.PosInfo my_pos_info = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.my_pos_info_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_EnterGame::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_EnterGame*>(&to_msg);
  auto& from = static_cast<const SCP_EnterGame&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_EnterGame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(
      from._internal_players());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.my_pos_info_ != nullptr);
    if (_this->_impl_.my_pos_info_ == nullptr) {
      _this->_impl_.my_pos_info_ =
          ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(arena, *from._impl_.my_pos_info_);
    } else {
      _this->_impl_.my_pos_info_->MergeFrom(*from._impl_.my_pos_info_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_EnterGame::CopyFrom(const SCP_EnterGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_EnterGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_EnterGame::InternalSwap(SCP_EnterGame* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
  swap(_impl_.my_pos_info_, other->_impl_.my_pos_info_);
}

::google::protobuf::Metadata SCP_EnterGame::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_Spawn::_Internal {
 public:
};

SCP_Spawn::SCP_Spawn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_Spawn)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Spawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_Spawn& from_msg)
      : players_{visibility, arena, from.players_},
        _cached_size_{0} {}

SCP_Spawn::SCP_Spawn(
    ::google::protobuf::Arena* arena,
    const SCP_Spawn& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_Spawn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_Spawn)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Spawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : players_{visibility, arena},
        _cached_size_{0} {}

inline void SCP_Spawn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SCP_Spawn::~SCP_Spawn() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_Spawn)
  SharedDtor(*this);
}
inline void SCP_Spawn::SharedDtor(MessageLite& self) {
  SCP_Spawn& this_ = static_cast<SCP_Spawn&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SCP_Spawn::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_Spawn(arena);
}
constexpr auto SCP_Spawn::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SCP_Spawn, _impl_.players_) +
          decltype(SCP_Spawn::_impl_.players_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SCP_Spawn), alignof(SCP_Spawn), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SCP_Spawn::PlacementNew_,
                                 sizeof(SCP_Spawn),
                                 alignof(SCP_Spawn));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_Spawn::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_Spawn_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_Spawn::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_Spawn>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_Spawn::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_Spawn>(), &SCP_Spawn::ByteSizeLong,
            &SCP_Spawn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_Spawn, _impl_._cached_size_),
        false,
    },
    &SCP_Spawn::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_Spawn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SCP_Spawn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_Spawn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .jhnet.PlayerInfo players = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Spawn, _impl_.players_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .jhnet.PlayerInfo players = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_Spawn, _impl_.players_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::PlayerInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SCP_Spawn::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_Spawn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_Spawn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_Spawn& this_ = static_cast<const SCP_Spawn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_Spawn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_Spawn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_Spawn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .jhnet.PlayerInfo players = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_players_size());
               i < n; i++) {
            const auto& repfield = this_._internal_players().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_Spawn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_Spawn::ByteSizeLong(const MessageLite& base) {
          const SCP_Spawn& this_ = static_cast<const SCP_Spawn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_Spawn::ByteSizeLong() const {
          const SCP_Spawn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_Spawn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .jhnet.PlayerInfo players = 1;
            {
              total_size += 1UL * this_._internal_players_size();
              for (const auto& msg : this_._internal_players()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_Spawn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_Spawn*>(&to_msg);
  auto& from = static_cast<const SCP_Spawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_Spawn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_players()->MergeFrom(
      from._internal_players());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_Spawn::CopyFrom(const SCP_Spawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_Spawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_Spawn::InternalSwap(SCP_Spawn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::google::protobuf::Metadata SCP_Spawn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_Despawn::_Internal {
 public:
};

SCP_Despawn::SCP_Despawn(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_Despawn)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Despawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_Despawn& from_msg)
      : field_unique_{visibility, arena, from.field_unique_},
        _field_unique_cached_byte_size_{0},
        _cached_size_{0} {}

SCP_Despawn::SCP_Despawn(
    ::google::protobuf::Arena* arena,
    const SCP_Despawn& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_Despawn* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_Despawn)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Despawn::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : field_unique_{visibility, arena},
        _field_unique_cached_byte_size_{0},
        _cached_size_{0} {}

inline void SCP_Despawn::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SCP_Despawn::~SCP_Despawn() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_Despawn)
  SharedDtor(*this);
}
inline void SCP_Despawn::SharedDtor(MessageLite& self) {
  SCP_Despawn& this_ = static_cast<SCP_Despawn&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SCP_Despawn::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_Despawn(arena);
}
constexpr auto SCP_Despawn::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SCP_Despawn, _impl_.field_unique_) +
          decltype(SCP_Despawn::_impl_.field_unique_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SCP_Despawn), alignof(SCP_Despawn), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SCP_Despawn::PlacementNew_,
                                 sizeof(SCP_Despawn),
                                 alignof(SCP_Despawn));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_Despawn::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_Despawn_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_Despawn::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_Despawn>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_Despawn::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_Despawn>(), &SCP_Despawn::ByteSizeLong,
            &SCP_Despawn::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_Despawn, _impl_._cached_size_),
        false,
    },
    &SCP_Despawn::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_Despawn::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 0, 2> SCP_Despawn::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_Despawn>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated uint64 field_unique = 1;
    {::_pbi::TcParser::FastV64P1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Despawn, _impl_.field_unique_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated uint64 field_unique = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_Despawn, _impl_.field_unique_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kPackedUInt64)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void SCP_Despawn::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_Despawn)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.field_unique_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_Despawn::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_Despawn& this_ = static_cast<const SCP_Despawn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_Despawn::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_Despawn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_Despawn)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated uint64 field_unique = 1;
          {
            int byte_size = this_._impl_._field_unique_cached_byte_size_.Get();
            if (byte_size > 0) {
              target = stream->WriteUInt64Packed(
                  1, this_._internal_field_unique(), byte_size, target);
            }
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_Despawn)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_Despawn::ByteSizeLong(const MessageLite& base) {
          const SCP_Despawn& this_ = static_cast<const SCP_Despawn&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_Despawn::ByteSizeLong() const {
          const SCP_Despawn& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_Despawn)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated uint64 field_unique = 1;
            {
              total_size +=
                  ::_pbi::WireFormatLite::UInt64SizeWithPackedTagSize(
                      this_._internal_field_unique(), 1,
                      this_._impl_._field_unique_cached_byte_size_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_Despawn::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_Despawn*>(&to_msg);
  auto& from = static_cast<const SCP_Despawn&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_Despawn)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_field_unique()->MergeFrom(from._internal_field_unique());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_Despawn::CopyFrom(const SCP_Despawn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_Despawn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_Despawn::InternalSwap(SCP_Despawn* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.field_unique_.InternalSwap(&other->_impl_.field_unique_);
}

::google::protobuf::Metadata SCP_Despawn::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SCP_Move::_Internal {
 public:
  using HasBits =
      decltype(std::declval<SCP_Move>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_._has_bits_);
};

SCP_Move::SCP_Move(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:jhnet.SCP_Move)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::jhnet::SCP_Move& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

SCP_Move::SCP_Move(
    ::google::protobuf::Arena* arena,
    const SCP_Move& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SCP_Move* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.pos_info_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(
                              arena, *from._impl_.pos_info_)
                        : nullptr;
  _impl_.field_unique_ = from._impl_.field_unique_;

  // @@protoc_insertion_point(copy_constructor:jhnet.SCP_Move)
}
inline PROTOBUF_NDEBUG_INLINE SCP_Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void SCP_Move::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, pos_info_),
           0,
           offsetof(Impl_, field_unique_) -
               offsetof(Impl_, pos_info_) +
               sizeof(Impl_::field_unique_));
}
SCP_Move::~SCP_Move() {
  // @@protoc_insertion_point(destructor:jhnet.SCP_Move)
  SharedDtor(*this);
}
inline void SCP_Move::SharedDtor(MessageLite& self) {
  SCP_Move& this_ = static_cast<SCP_Move&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.pos_info_;
  this_._impl_.~Impl_();
}

inline void* SCP_Move::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SCP_Move(arena);
}
constexpr auto SCP_Move::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(SCP_Move),
                                            alignof(SCP_Move));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SCP_Move::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SCP_Move_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SCP_Move::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SCP_Move>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SCP_Move::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SCP_Move>(), &SCP_Move::ByteSizeLong,
            &SCP_Move::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_._cached_size_),
        false,
    },
    &SCP_Move::kDescriptorMethods,
    &descriptor_table_jhnet_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SCP_Move::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> SCP_Move::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::jhnet::SCP_Move>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .jhnet.PosInfo pos_info = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_.pos_info_)}},
    // uint64 field_unique = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(SCP_Move, _impl_.field_unique_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_.field_unique_)}},
  }}, {{
    65535, 65535
  }}, {{
    // uint64 field_unique = 1;
    {PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_.field_unique_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt64)},
    // .jhnet.PosInfo pos_info = 2;
    {PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_.pos_info_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::jhnet::PosInfo>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SCP_Move::Clear() {
// @@protoc_insertion_point(message_clear_start:jhnet.SCP_Move)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.pos_info_ != nullptr);
    _impl_.pos_info_->Clear();
  }
  _impl_.field_unique_ = ::uint64_t{0u};
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SCP_Move::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SCP_Move& this_ = static_cast<const SCP_Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SCP_Move::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SCP_Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:jhnet.SCP_Move)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // uint64 field_unique = 1;
          if (this_._internal_field_unique() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteUInt64ToArray(
                1, this_._internal_field_unique(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .jhnet.PosInfo pos_info = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.pos_info_, this_._impl_.pos_info_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:jhnet.SCP_Move)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SCP_Move::ByteSizeLong(const MessageLite& base) {
          const SCP_Move& this_ = static_cast<const SCP_Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SCP_Move::ByteSizeLong() const {
          const SCP_Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:jhnet.SCP_Move)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // .jhnet.PosInfo pos_info = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pos_info_);
            }
          }
           {
            // uint64 field_unique = 1;
            if (this_._internal_field_unique() != 0) {
              total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(
                  this_._internal_field_unique());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SCP_Move::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SCP_Move*>(&to_msg);
  auto& from = static_cast<const SCP_Move&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:jhnet.SCP_Move)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.pos_info_ != nullptr);
    if (_this->_impl_.pos_info_ == nullptr) {
      _this->_impl_.pos_info_ =
          ::google::protobuf::Message::CopyConstruct<::jhnet::PosInfo>(arena, *from._impl_.pos_info_);
    } else {
      _this->_impl_.pos_info_->MergeFrom(*from._impl_.pos_info_);
    }
  }
  if (from._internal_field_unique() != 0) {
    _this->_impl_.field_unique_ = from._impl_.field_unique_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SCP_Move::CopyFrom(const SCP_Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:jhnet.SCP_Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SCP_Move::InternalSwap(SCP_Move* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_.field_unique_)
      + sizeof(SCP_Move::_impl_.field_unique_)
      - PROTOBUF_FIELD_OFFSET(SCP_Move, _impl_.pos_info_)>(
          reinterpret_cast<char*>(&_impl_.pos_info_),
          reinterpret_cast<char*>(&other->_impl_.pos_info_));
}

::google::protobuf::Metadata SCP_Move::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace jhnet
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_jhnet_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
